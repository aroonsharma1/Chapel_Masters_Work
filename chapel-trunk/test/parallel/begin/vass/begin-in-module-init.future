bug: compiler crashes with an internal error when the main module uses another module and the other module has a 'begin' at the top level

The compiler crashes differently with --verify and without.
--verify catches the issue earlier, so I set up this test with --verify.

Explanation why this happens: when compiling this code:

  module mainModule { use auxModule; }
  module auxModule  { begin...; }

The module init function for auxModule, init_aux() for short,
will get en endCount formal, to be propagated to the task function
for its begin statement.

The module init function for mainModule, init_main() for short,
should pass its endCount to init_aux(), which it invokes.

Currently, endCount propagation happens in the parallel pass,
whereas the call init_main->init_aux is added in addInitCalls pass,
which is later. So endCount propagation does not know about
the call from init_main to init_aux and does not insert endCount.

I was about to fix this by adding a special case to addInitCalls(),
then I discussed this with Tom and we preferred not to add yet
another special case. Instead, here are some prinicpled ways
of dealing with this:

* Add the call init_main->init_aux early in compilation,
so parallel() takes it into account.

* Have all module init functions pass endCount to each other.

* Better yet, have all module init functions pass an "execution context"
object to each other, which endCount would be a part of.

* Or, have the top-level endCount or execution context be a global
variable, which a module init count goes to if needed.

* Tom recalled that another project found that passing variables around
was better than keeping them global, so we might want to learn from
their wisdom.

And while there, I had a though that for a multilocale execution
we might want to have a top endCount object on each locale,
in case each locale executes a lot of tasks without an enclosing sync.
