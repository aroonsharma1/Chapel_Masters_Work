performance: Pass arguments to on functions in a coforall by const ref by default.

Following the checkin of r22438, comm counts for the tests 
       test/studies/hpcc/CommDiags/stream-ep_commDiags.chpl
       test/studies/ssca2/performance/SSCA2_commDiags.chpl
increased.  

This is because in general, reference-counted task arguments passed to a
nonblocking on function must be protected from early deletion by bumping the
reference count in the calling context and then decrementing it at the end of
the task function.  Typically, at least one of these will involve internode
communication.

As this test shows, two remote forks are currently generated: one to execute
_downEndCount() on the shared coforall count; one in chpl___TILDE__array6() to
release the task function's reference to the shared validAnswers array.
However, since the lifetime of the shared validAnswers array lasts beyond the
end of the coforall (and all the tasks referring to it must terminate before
the coforall exits), it is not strictly necessary to increase and decrease the
reference count in validAnswers.  

In other words, there is an opportunity for optimizing the handling of
reference counts when a nonblocking "on" occurs immediately inside a coforall.
These on statements are handled specially, to integrate remote execution with
the coforall construct, so the coforall blocks pending completion of all of
those remotely spawned tasks.  The same optimization would not apply to an "on"
statement that appeared elsewhere in the same coforall construct.

Two possible approaches to this optimization would be to pass arguments to the
coforall task block by reference, or to use a special flag to indicate that a
given nonblocking on block lies immediately inside a coforall.  In the latter
scheme, the autoCopy and autoDestroy calls that are applied to the arguments of
"normal" nonblocking "on" blocks are *not* applied to "coforall child"
nonblocking "on" blocks.


