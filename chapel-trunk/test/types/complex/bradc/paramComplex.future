semantic: no param complexes

This is arguably a bug based on the current spec which says that all
primitive types can be parameters.  However, we can't make param
complexes currently because (a) parameters must be initialized, and
(b) we don't have any literal complex values.

Here I'm proposing that we support a small number of ways to create a
param complex via unary and binary + and - operators on param floating
point and imaginary values.  However, it's potentially problematic
because we currently don't support any parameter functions on floating
point values (such as unary + and -), so adding support for these
forms would start us down a slippery slope.

Another approach would be to support casting from 2-tuples of floating
point values to complexes at compile-time, but this would require
support for param tuples and param casts, neither of which we
currently support.  Ugh.

We could change the spec to treat complexes as a special case that
doesn't support param values, but this seems dissatisfying to me.

While I'm philosophizing about this, I'm second-guessing our decision
not to do any floating point operations at compile-time.  It feels a
little paranoid to me given that some operations (equality, unary +/-)
seem like they shouldn't be problematic.

12/2/10: One thought that I had on this while talking through param
floating point operations with Jonathan Claridge and Vass at lunch
yesterday was that perhaps we could restrict our param floating point
operations to those that can be implemented using strings alone in
order to avoid having to convert from strings to floating point values
and back to strings again (or do anything else that might admit specific
rounding modes or the like).  This would permit unary + and - for example
(just prepend the sign to the string representing the value) as well as
supporting the binary +/- operators on real/imaginary pairs.



