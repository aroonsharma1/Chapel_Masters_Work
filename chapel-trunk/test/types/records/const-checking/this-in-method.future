feature request: provide a mechanism for disallowing methods on a record type from modifying the fields of 'this' when they are invoked on a 'const' record

//see also: classes/vass/propagateConstnessOfVariableToFields.future

For example:

    record R { var x: int; }
    proc R.mod()   { x = 5; }
    proc R.nomod() { writeln(x); }

    var r1: R;
    r1.nomod();
    r1.mod();

    const r2: R;
    r2.nomod();
    r2.mod();  // compiler must report error here; the previous calls are fine
    r2 = r1;   // correctly disallowed today

Rationale: in my mind, 'const r2' means the program is disallowed
to modify r2's value. The latter means exactly modifications of r2's fields.

Assignment to r2 is another way to modify r2's fields.
Therefore, in the case of a method on a record type,
the method should be allowed to modify fields of 'this'
IFF it is allowed to assign to 'this' wholesale.
Well except for the case that the record contains 'const' fields,
which deserves a separate treatment. E.g in the above example,
if 'x' in R were declared 'const', would 'r1.x = 1' be legal?
If so, a method on R should never be allowed to assign to 'this'
or to modify 'x' (directly or indirectly).

Contrast this with the case of a class type:

    class C { var x: int; }
    proc C.mod() { x = 5; }

    var c1: C = new C();
    c1.mod();

    const c2: C = new C();
    c2.mod();  // OK
    c2 = c1;   // correctly disallowed today

c2's value is, informally, a pointer. The compiler correctly prevents
putting a different pointer into c2. Meanwhile, c2.x is still a 'var'
so its modification is allowed.

The latter might be undesirable in certain cases, too.
That is discussed in propagateConstnessOfVariableToFields.future.


How could we provide such a mechanism?


(A) Have the compiler do an interprocedural analysis
to detect methods that are not OK to invoke on a 'const' record.

Examples:
    proc R.example1() { writeln("in example1"); }  // always OK
    proc R.example2() { x = 5; }                   // always not OK
    proc R.example3() { this.example4(); }         // OK iff example4() is OK

Pro: automatic, easy on the programmer.

Cons 1: The compiler may not always be able to do such analysis.  If
it can't, it will need to be conservative, which may result in errors
that are not intuitive to the user.

Cons 2: Does not provide the benefit of user's explicit specification
of whether they intend to allow or disallow record modification
in a given method. Such benefit is similar e.g. to being able
to declare a variable with 'var' vs. 'const'.


(B) Provide an implicit formal argument, similarly to 'setter' in 'var' methods,
that indicates whether the method is invoked on a 'const' or 'var' record.
The user may test that argument and generate compilerError if necessary.

Pro: simple.

Cons 1: The user is responsible for correctness.

Cons 2: Requires propagation and code duplication recursively
through the call graph.


(C) Annotate (explicitly or implicitly) each record method with whether
it is OK to invoke it on a 'const' record. (This is orthogonal to (B).)

Example syntax:
    proc const R.nomod()  // OK to invoke on a 'const' record
    proc var   R.mod()    // not OK to invoke
    proc       R.blah()   // default annotation (TBD)

Pro: Compiler-checkable documentation.

Cons 1: More work for the user, both in extra typing/longer code
(depending on the syntax) and in having to get the annotations right.

Cons 2: Unclear what the default annotation should be. We probably want
the default to be more generous, but does it mean "allow more code
in the body of the method" or "allow it to be invoked in more cases"?

Cons 3, possibly: More burdensome implementation and the need to
propagate the property through the call graph (see (C')).

If each method is in either OK or not-OK category but not both, then
the implementation seems straightforward: 'this' is a 'const'
in an "OK" method and a 'var' in a "not-OK" method.


(C') We discussed an implementation strategy that allows a given
method to serve both roles in (C). I am unclear exactly what that
strategy achieves, but it seems like it would implement (A). It also
lends itself naturally to be used for those methods in (C) that the
user did not annotate explicitly as either "OK" or "not-OK".
Just like with (A), this reduces the burden on the user but takes
away the benefit of user-defined var-vs-const distinction.

This implementation strategy is:

- Have each record method be generic over whether it is invoked
on a 'var' record. This is analogous to a 'var' method being generic
over its implicit 'setter' argument. Let's say this is done via
an implicit 'invokedOnVar' formal argument. (Which would implement (B).)

- 'invokedOnVar' is set by the compiler appropriately when the method
is invoked on a 'var' or 'const' variable. When the method is invoked
from another method (with the same receiver record), invokedOnVar in
the callee equals that in the caller. Alternatively, mark 'this'
as 'var' when invokedOnVar==true and 'const' otherwise.

Open question: is it reasonable to have the code expansion
that generic instantiation under this strategy will lead to?
Can it be mitigated?


Note: (C) and (C') share the annotation of 'this' as 'var' or 'const'.
This makes (C) and (C') look compatible. However, we need to give
a precise definition of the semantics in the two approaches.
As a side effect, this will indicate whether they are indeed compatible.


(D) An unrelated idea: provide an annotation indicating
whether it is OK to invoke the method on a 'var' record.
Invoking such a method on a 'const' record would always be OK.

This is analogous to (C) but with the var/const roles switched.

Pro: This would ensure that the fields of the records never change,
neither by the callee nor by anyone concurrently with the callee.
This would enable some optimizations.

Cons: Similar to (C), except the choice for the default seems
more obvious. (I.e. OK by default.)


Note: Do we really need to do splitting, i.e. make each method generic
over 'invokedOnVar' (or similar) then instantiate separately for true
and false? If the only benefit we get from this is compile-time
diagnostics, we should try to achieve the same behavior just by running
an analysis over the call graph and avoid adding genericity.

Note: We also need to understand whether, for the above discussion,
rvalue records (such as a result of an expression) should be treated
as 'const' or 'var'. In theory, in-place modification of an rvalue
is nonsensical - instead such modification simply generates another
rvalue. OTOH the following code seems legit:

    proc R.readThis() { x = stdin.readInt(); }  // not OK to invoke on 'const'
    var r = (new R()).readThis();       // modifes the rvalue, but makes sense
