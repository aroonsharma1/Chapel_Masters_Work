semantic: Integer overflow behavior unspecified

Chapel does not specify how integer overflow is handled, and relies on the
behavior of the backend compiler.  In GCC, when -O2 is specified and
-fstrict-overflow is not specifically disabled, the behavior is different than
when optimization is disabled.

The GNU compiler will warn that it is making strict overflow assumptions if
such warnings are enabled.  -Wall sets -Wstrict-overflow=2, but we toss
-Wno-strict-overflow to quiet a warning that GCC gives w.r.t. our coding of the
range iterator core range.these().  So that's a problem if the user is
relying on well-defined integer overflow behavior in other places.  

It is desirable to rewrite the kernel range iterator so it does not cause the
warning.  Then the warning can be re-enabled to flag potential problems in the
user's code.

A less desirable solution would be to set aside a specified
sentinel value in each range that is unique from any valid index.  This would
mean that iteration over maximal ranges (as they are currently defined) would
not be supported.

The rewriting may not be amenable to certain optimizations.  But this problem
may be solved by identifying and splitting off the special cases at compile
time.  It is only the ranges that do not have a natural sentinel value that
would have to be handled specially.  Arguably, these cases would be very rare,
and the user could be steered away from them by warning messages and other
documentation.  For example, "warning: I had to split iteration over a
maximal range; some optimizations may have been disabled."

