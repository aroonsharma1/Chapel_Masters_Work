bug: using c_sublocid_any in Chapel code

This and adjacent futures document the following issues using c_sublocid_any.

* c_sublocid_any.inner-extern.chpl
  c_sublocid_any.inner-ne.chpl

When c_sublocid_any is declared as a local variable in a procedure test()
then used in a nested procedure inner(), flattenFunctions makes
c_sublocid_any a formal of inner(), then passed it to it as an argument.

The local variable in test() and the formal in inner() both have
issues in the generated code, because of #define c_sublocid_any (-1)
in one of the headers #included by the generated C code.

The difference between the two versions is:
  c_sublocid_any.inner-extern.chpl  declares c_sublocid_any as 'extern'
  c_sublocid_any.inner-ne.chpl      does not mark c_sublocid_any as 'extern'

To generate compilable C code, we need to distinguish the case where
c_sublocid_any references the extern (so do not rename it etc.)
vs. it is introduced in the program (non-extern) or by the compiler
(so need to rename it).

* c_sublocid_any.mod-extern.chpl
  c_sublocid_any.mod-ne.chpl

These tests exercise the case where c_sublocid_any is declared
in the global scope, as extern or non-extern.

As of this writing, the extern version works correctly... until it
falls under task intents, when the above section applies.

The non-extern version suffers from the same issue as a local variable
in the above section.
