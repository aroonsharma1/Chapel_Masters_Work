bug: when a record that is defined in a proc and is unused is eliminated from the AST, its chpl__autoCopy() and chpl__initCopy() remain in the AST

Most of the code in .chpl is variations on this program that currently breaks:

    proc p { record R {} }

Currently I get this:

  $CHPL_HOME/modules/internal/ChapelBase.chpl:1235: error: SymExpr::var::defPoint is not in AST [expr.cpp:193]

I encountered this situation in the context of SSCA#2 (the code commited
in r20040, when compiled for a torus. The SymExpr that caused the error
was (3232849 SymExpr 'chpl__initCopy[0]:_unknown[12]')
whose parentSymbol was:

'fn chpl__autoCopy[3232618]:VertexData[0]'
  (3232621 DefExpr 'arg x[3232620]:VertexData[0]')
  (3232622 BlockStmt
    (3232624 DefExpr '_ret[3232623]:VertexData[0]')
    (3232625 BlockStmt
      (3232627 DefExpr '_tmp[3232626]:VertexData[0]')
      (3232628 CallExpr move
        (3232629 SymExpr '_tmp[3232626]:VertexData[0]')
        (3232631 CallExpr
          (3232849 SymExpr 'chpl__initCopy[0]:_unknown[12]')
          (3232632 SymExpr 'arg x[3232620]:VertexData[0]')))
      (3232633 CallExpr move
        (3232634 SymExpr '_ret[3232623]:VertexData[0]')
        (3232636 SymExpr '_tmp[3232626]:VertexData[0]'))
      (3232638 GotoStmt 
       (3232637 SymExpr '_end_chpl__autoCopy[3232639]')
        (3232637 SymExpr '_end_chpl__autoCopy[3232639]')))
    (3232640 DefExpr '_end_chpl__autoCopy[3232639]')
    (3232641 CallExpr return
      (3232642 SymExpr '_ret[3232623]:VertexData[0]')))

VertexData seems to be the trouble-making record. It was declared
inside proc generate_and_analyze_associative_array_RMAT_graph_representation
but neither record nor the proc were used for torus compiles.

When the record's declaration is moved outside the proc,
everything works fine.
