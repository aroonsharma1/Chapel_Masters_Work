#!/usr/bin/env perl

if (!defined $ENV{'CHPL_HOME_REPOSITORY'}) {
    print "ERROR: CHPL_HOME_REPOSITORY must be set to use tokctnightly\n";
    exit(1);
}
$svnroot = $ENV{'CHPL_HOME_REPOSITORY'};

$printusage = 0;
if (@ARGV) {
    $debugflag = shift @ARGV;
    if ($debugflag eq "-debug") {
	$debug = 1;
    } elsif ($debugflag eq "-cron") {
	$debug = 0;
    } else {
	$printusage = 1;
    }
} else {
    $printusage = 1;
}

if (@ARGV) {
    $statdate = shift @ARGV;
    $svndateraw = `date +%F -d$statdate`; chomp($svndateraw);
} else {
    $statdate = `date +%D`; chomp($statdate);
    $svndateraw = `date +%F`; chomp($svndateraw);
}
$svndate = "{$svndateraw}";

if ($printusage == 1) {
    print "nightly [-debug|-cron] {date}\n";
    exit 1;
}


#
# get uniquifiers
#
$pid = getpgrp();
$user = `whoami`;
chomp($user);
$debugmail = $ENV{'CHPL_NIGHTLY_DEBUG_EMAIL'};
if ($debugmail eq "") {
    $debugmail = "$user\@cray.com";
}
$today = `date +%w-%a`; chomp($today);


#
# set mail options
#
$mailer = $ENV{'CHPL_MAILER'};
if ($mailer eq "") {
    $mailer = "Mail";
}
if ($debug == 1) {
    $subjectid = "Dbg token count";
    $recipient = $debugmail;
} else {
    $subjectid = "Cron token count";
    $recipient = "chapel_cronmail\@cray.com";
}


#
# directory locations
#
$tmpdir = "/tmp/chapel-tokctnightly-uw.$user.$pid.deleteme";
$chapeldir = "$tmpdir/chapel";
$logdir = "/data/sea/cascade/chapel/Nightly";
$statdir = "$logdir/Stats";
if ($debug == 1) {
    $statfile = "$statdir/tokctnightly.debug.dat";
} else {
    $statfile = "$statdir/tokctnightly.cron.dat";
}
$tokctdir = "~/chapel/util/tokencount";
$tokctr = "$tokctdir/tokencount.cron";

mysystem("cd $tokctdir && make > /dev/null", "building token counter", 1, 1);

$somethingfailed = 0;

#
# make temp directory
#
mysystem("mkdir $tmpdir > /dev/null", "creating temp dir", 1, 1);

#
# checkout sources
#

mysystem("cd $tmpdir && svn export -q -r '$svndate' $svnroot chapel", "svn checkout", 1, 1);

$allcppfiles = "`find -name '*.cpp'` `find -name '*.c'` `find -name '*.h'`";
$compdir = "$tmpdir/chapel/compiler";
$bindir = "$tmpdir/chapel/bin/$ENV{'CHPL_HOST_PLATFORM'}";

# remove generated files
mysystem("cd $compdir && rm -f */*.g.d_parser.cpp vparser/cast_code.cpp analysis/prim_data.h analysis/prim_data.cpp");

mysystem("cd $compdir/AST && $tokctr $allcppfiles > ../AST.ntoks", "counting AST tokens", 0, 1);
mysystem("cd $compdir/adt && $tokctr $allcppfiles > ../adt.ntoks", "counting adt tokens", 0, 1);
#mysystem("cd $compdir/analysis && $tokctr $allcppfiles > ../analysis.ntoks", "counting AST tokens", 0, 1);
mysystem("cd $compdir/ifa && $tokctr $allcppfiles > ../ifa.ntoks", "counting ifa tokens", 0, 1);
mysystem("cd $compdir/backend && $tokctr $allcppfiles > ../backend.ntoks", "counting backend tokens", 0, 1);
mysystem("cd $compdir/include && $tokctr $allcppfiles > ../include.ntoks", "counting include tokens", 0, 1);
mysystem("cd $compdir/main && $tokctr $allcppfiles > ../main.ntoks", "counting main tokens", 0, 1);
mysystem("cd $compdir/optimizations && $tokctr $allcppfiles > ../opt.ntoks", "counting optimizations tokens", 0, 1);
mysystem("cd $compdir/resolution && $tokctr $allcppfiles > ../resolution.ntoks", "counting resolution tokens", 0, 1);
mysystem("cd $compdir/parser && $tokctr $allcppfiles > ../parser.ntoks", "counting parser tokens", 0, 1);
mysystem("cd $compdir/passes && $tokctr $allcppfiles > ../passes.ntoks", "counting passes tokens", 0, 1);
#mysystem("cd $compdir/symtab && $tokctr $allcppfiles > ../symtab.ntoks", "counting AST tokens", 0, 1);
#mysystem("cd $compdir/traversals && $tokctr $allcppfiles > ../traversals.ntoks", "counting AST tokens", 0, 1);
mysystem("cd $compdir/util && $tokctr $allcppfiles > ../util.ntoks", "counting util tokens", 0, 1);
#mysystem("cd $compdir/vparser && $tokctr $allcppfiles > ../vparser.ntoks", "counting AST tokens", 0, 1);
mysystem("cd $tmpdir/chapel/runtime && $tokctr $allcppfiles > runtime.ntoks", "counting runtime tokens",0, 1);

mysystem("cd $chapeldir && make comprt", "making compiler", 1, 1);
$ENV{'CHPL_HOME'} = $chapeldir;
mysystem("$bindir/chpl --count-tokens $chapeldir/modules/standard/*.chpl $chapeldir/modules/internal/*.chpl $chapeldir/modules/dists/*.chpl $chapeldir/modules/layouts/*.chpl >& $compdir/chpcode.ntoks", "counting module tokens", 1, 1);

$asttoks = `cat $compdir/AST.ntoks`; chomp($asttoks);
$adttoks = `cat $compdir/adt.ntoks`; chomp($adttoks);
$analysistoks = 0;
$ifatoks = `cat $compdir/ifa.ntoks`; chomp($ifatoks);
$backendtoks = `cat $compdir/backend.ntoks`; chomp($backendtoks);
$includetoks = `cat $compdir/include.ntoks`; chomp($includetoks);
$maintoks = `cat $compdir/main.ntoks`; chomp($maintoks);
$opttoks = `cat $compdir/opt.ntoks`; chomp($opttoks);
$parsertoks = `cat $compdir/parser.ntoks`; chomp($parsertoks);
$passestoks = `cat $compdir/passes.ntoks`; chomp($passestoks);
$resolutiontoks = `cat $compdir/resolution.ntoks`; chomp($resolutiontoks);
$symtabtoks = 0;
$traversalstoks = 0;
$utiltoks = `cat $compdir/util.ntoks`; chomp($utiltoks);
$vparsertoks = 0;
$runtimetoks = `cat $tmpdir/chapel/runtime/runtime.ntoks`; chomp($runtimetoks);
$chpcodetoks = `cat $compdir/chpcode.ntoks`; chomp($chpcodetoks);

if ($asttoks == "") {
    $asttoks = 0;
}
if ($adttoks == "") {
    $adttoks = 0;
}
if ($analysistoks == "") {
    $analysistoks = 0;
}
if ($ifatoks == "") {
    $ifatoks = 0;
}
$analysistoks += $ifatoks;
if ($backendtoks == "") {
    $backendtoks = 0;
}
if ($includetoks == "") {
    $includetoks = 0;
}
if ($maintoks == "") {
    $maintoks = 0;
}
if ($opttoks == "") {
    $opttoks = 0;
}
if ($parsertoks == "") {
    $parsertoks = 0;
}
if ($passestoks == "") {
    $passestoks = 0;
}
if ($resolutiontoks == "") {
    $resolutiontoks = 0;
}
if ($symtabtoks == "") {
    $symtabtoks = 0;
}
if ($traversalstoks == "") {
    $traversalstoks = 0;
}
if ($utiltoks == "") {
    $utiltoks = 0;
}
if ($vparsertoks == "") {
    $vparsertoks = 0;
}
if ($runtimetoks == "") {
    $runtimetoks = 0;
}
if ($chpcodetoks == "") {
    $chpcodetoks = 0;
}
$comptoks = 0;
$fetoks = 0;

`echo -n "$statdate" >> $statfile`;
`echo -n "\t-\t-\t-" >> $statfile`;

$tot = 0;

$tot += $utiltoks;
emit($tot);
$tot += $adttoks;
emit($tot);
$tot += $vparsertoks;
emit($tot);
$tot += $maintoks;
emit($tot);
$tot += $passestoks;
emit($tot);
$tot += $parsertoks;
emit($tot);
$tot += $symtabtoks;
emit($tot);
$tot += $asttoks;
emit($tot);
$tot += $traversalstoks;
emit($tot);
$tot += $analysistoks;
emit($tot);
$tot += $backendtoks;
emit($tot);
$tot += $includetoks;
emit($tot);
$tot += $runtimetoks;
emit($tot);
$tot += $chpcodetoks;
emit($tot);
$tot += $opttoks;
emit($tot);
$tot += $resolutiontoks;
emit($tot);

`echo -n "\n" >> $statfile`;


#
# clean up
#
if (1 || $somethingfailed == 0) {
    mysystem("rm -rf $tmpdir", "removing temp dir", 0, 1);
}

exit 0;


#
# subroutines
#

sub mysystem {
    $command = $_[0];
    $errorname = $_[1];
    $fatal = $_[2];
    $mailmsg = $_[3];

    $status = system($command);
    if ($status != 0) {
	$somethingfailed = 1;
        $status = $status / 256;
	print "Error $_[1]: $status\n";

	if ($mailmsg != 0) {
            $mailsubject = "$subjectid Failure";
            $mailcommand = "| $mailer -s \"$mailsubject \" $recipient";

            print "Trying to mail message... using $mailcommand\n";
	    open(MAIL, $mailcommand);
	    print MAIL "=== Summary ===================================================\n";
	    print MAIL "ERROR $_[1]: $status\n";
	    print MAIL "===============================================================\n";
	    close(MAIL);
	}

	if ($fatal != 0) {
	    `echo "$statdate\t-" >> $statfile`;
	    if ($debug == 0) {
		`ci -l -m"automated nightly checkin" $statfile`;
	    }
	    `cd $statdir && ./makeplot`;
            mysystem("rm -rf $tmpdir", "removing temp dir", 0, 1);
	    exit 1;
	}
    }
    $status;
}


sub emit {
    $toks = $_[0];
    `echo -n "\t" >> $statfile`;
    if ($toks == 0) {
	`echo -n "-" >> $statfile`;
    } else {
	`echo -n "$toks" >> $statfile`;
    }
}
