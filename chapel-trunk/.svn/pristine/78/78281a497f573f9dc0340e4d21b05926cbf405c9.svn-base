This directory showcases different versions of the Computer Language Benchmark
Game problem "thread-ring".  The significant difference between the programs
is each version uses a different task parallelism idiom: the current preferred
version utilizes a coforall loop to start the individual threads, and within
that loop uses a begin statement to fire off the tasks.  This was discovered to
be faster than utilizing solely coforall (an alternate version also present in
this directory), and as expected was faster than a version that utilizes only
begin statements within a for loop (also present here).  All three versions are
retained within the subdirectory lydia in case in the future the performance of
one or all of these strategies alters for better or for worse.

Other changes tried: altering chpl_task_alloc calls in the c code to
chpl_malloc calls caused little to no improvement on its own, but when combined
with deletions of extraneous _ic_these_DefaultRectangularDom_1_int64_t_F alloc's
and free's caused a fair improvement, although not as much as we would like.
Utilizing writeXF instead of writeEF also seemed to give a slight improvement.

Skipping testing under valgrind because the current settings do not allow enough
threads to complete even under the (comparatively) low number of threads for
that sample size

Although the following are (probably?) not allowed in the benchmark game, their
performance is nice enough that it should be noted:
  - Using qthreads brings the time down to roughly 100 seconds
  - Using the muxed tasking layer and soft threads brings the time down to 65-75
    seconds