bug: casts of enums with initialization expressions is broken

Enum initialization expressions are not folded early enough.  We do
folding during the function resolution phase, which does a post-order
traversal of the expressions in a function, which means that the
expressions used to initialize enum values are folded late.  This
results in incorrect behavior for casts and foldable relational
operations (handled in foldEnumOps), if the expression is not an
immediate (e.g., call expression PRIM_UNARY_MINUS).  The details are
that the get_int() functions returns false, and so the value is
assumed to be either the default (for the first enum) or the "next"
value in the sequence.

If we restrict the types of expressions that can be used to initialize
enum values (e.g., no function calls), we could collapse all the enum
types before function resolution and that should fix the problem.  We
could also fold these expressions as we run into them (again we have
to restrict the types of expressions used).

There may be similar problems for other calls to get_int() that make
this assumption.
