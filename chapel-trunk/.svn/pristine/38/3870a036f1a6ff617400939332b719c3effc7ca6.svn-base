bug: "no auto destroy" flag not propagated through temporaries.

In this test, the comm counts are higher than they should be.  A very clever
programmer has discovered that the iterator itself performs synchronization on
the "flags" array (to ensure that it is not deleted before all spawned tasks
have exited).  Therefore, he can subvert the compiler's normal protection of
reference-counted variables that are shared across nonblocking on calls, and
thereby gain a slight performance improvement.

The compiler's normal protection involves bumping the reference count in the
spawning routine (for each spawned task) and then to decrement the reference
count when the spawned task exits.  These actions can be subverted by appling
the "no copy" and "no auto destroy" pragmas to the (reference-counteed)
variable in question.

But, that optimzation does not always work, because the flags supplied by the
pragmas are not propagated to temporaries.  If a variable is loaded into a
temporary before being passed to the "on" function, the flag is lost and the
user-specified optimization is not performed.

As a specific example, the "flags" array is a reference-counted type for which
autoCopy and autoDestroy calls are inserted, even though the pragmas aimed to
prevent those insertions are present.  To show this, the code was compiled with
the command:
  chpl_debug userSync.chpl --no-inline

In the generated code the autoCopy is inserted in init2() [LocaleModel.c:880]:
    T10 = chpl__autoCopy7(&flags);

The corresponding autoDestroy appears in on_fn61() [LocaleModel.c:523]:
  chpl__autoDestroy64(flags);

The autoCopy does not cause communication in this case, because init2 runs on
the same locale where it is resident.  However, the autoDestroy causes an extra
remote fork.


Note: In the code, both flags "no copy" and "no auto destroy" should be
supplied, but only "no auto destroy" is.  That is because the compiler
currently has an assertion failure if "no copy" is used on a variable that does
not have an explicit initializer.  The implementation may require this, though
from a source-code standpoint, it does not appear to be a necessity.


TODO: When this bug is fixed, the optimization can be applied to the "flags" array in
initOnLocales() in ChapelLocale.chpl.  Then, in the comm counts resported by
printInitCommCounts.chpl, there will be one fewer remote fork on each of the
remote nodes, and a slight speedup may be detectable in certain performance tests.
