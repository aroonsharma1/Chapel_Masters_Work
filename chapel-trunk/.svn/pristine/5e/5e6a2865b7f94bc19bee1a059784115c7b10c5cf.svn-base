=============
Locale Models
=============

------------
Introduction
------------

Chapel's original computer system architecture model was a collection of
simple locales connected by a communication network.  The locales had
one or more homogeneous processor cores and one kind of memory, with all
the memory equidistant from all the processor cores.  But while this
model was conceptually easy to deal with, it couldn't support users who
wanted to take advantage of modern node architectures.  To support
these, we are extending architectural descriptions.  In the new model
the top level may still be a network of locales, but the locales are
more complicated.  They may be internally heterogeneous, containing
multiple instances of memories and/or processors with differing
characteristics.  They may also be hierarchical, with parent locales
containing one or more child sublocales within them.

There are currently three locale models available, flat, NUMA, and acc.
The flat model is the default and maps closely to the view of locales
implemented in the 1.7 release.  The NUMA locale model maps sublocales
to NUMA domains.  The NUMA model is currently implemented at a prototype
level. Performance has not yet been a focus in the NUMA locale model and
will require additional effort in future releases. The acc locale model
describes locales that consist of conventional processors with attached
accelerators. It is currently a work in progress and does not fully 
target accelerators yet. We expect to add more locale models in future 
releases.


-----------------------------------
Architecture support in the modules
-----------------------------------

The code emitted by the compiler contains calls to support routines that
manage memory, communication, and tasking, among other things.  Before
hierarchical locale support was added, these calls were all satisfied
directly by the runtime.  With hierarchical locales, now they are
satisfied by the Chapel module code that defines the architecture of a
locale.  The required interface for this is defined by ChapelLocale and
implemented by LocaleModel.chpl.  The required interface is still a work
in progress and will continue to evolve.


-----------------
Flat Locale Model
-----------------

The current default locale model is the flat locale model. In the flat model,
locales have homogeneous processor cores and all cores are equidistant from
memory.


-----------------
NUMA Locale Model
-----------------

In the NUMA locale model, the processor is split into NUMA domains
and cores within a domain have faster access to local memory.

The NUMA locale model is currently supported using the qthreads tasking layer.
While other tasking layers are also functionally correct using the NUMA locale 
model, they are not NUMA aware.

To use the NUMA locale model:

1) Set the CHPL_LOCALE_MODEL environment variable to "numa".

    export CHPL_LOCALE_MODEL=numa

2) Set the CHAPEL_TASKS environment variable to "qthreads".

    export CHPL_TASKS=qthreads

3) Re-make the compiler and runtime from CHPL_HOME

    cd $CHPL_HOME
    make

4) Compile your Chapel program as usual.

    chpl -o jacobi $CHPL_HOME/examples/programs/jacobi.chpl

For full functionality, including proper mapping from sublocales to NUMA
domains, the NUMA locale model requires the Portable Hardware Locality (hwloc)
library, not included in the 1.8 Chapel release.  We expect to add the hwloc
library to a future release.

1) Download the hwloc library from http://www.open-mpi.org/projects/hwloc

2) Extract the hwloc tarball and follow the directions in the extracted README file
   to build and install the hwloc library.  This will follow the typical GNU
   install pattern:
     * ./configure --prefix=...
     * make
     * make install

3) Build or rebuild the qthreads library to incorporate the additional
   functionality.
     * cd $CHPL_HOME/third-party/qthreads
     * make clean
     * make CHPL_QTHREAD_CFG_OPTIONS="--with-hwloc=/path/to/hwloc/install --with-topology-hwloc"

4) Build Chapel as normal.
    * cd $CHPL_HOME
    * make


---------------------------------------
Caveats for using the NUMA locale model
---------------------------------------

* Explicit memory allocation for NUMA domains is not yet implemented
* Distributed arrays do not yet map iteration to NUMA domains
* Performance for NUMA has not been optimized.


----------------
Acc Locale Model
----------------

The acc locale model is intended to be used for locales that contain
conventional processors with attached accelerators. There are many
potential methods for targeting accelerators such as OpenCL, CUDA,
OpenACC, and in the future OpenMP. As such the there is a second
environment variable related to the acc locale model called
CHPL_ACC_CODEGEN. It changes the code generation depending on the method
being used to target accelerators. The current default is openacc if the
locale model is set to acc, otherwise it defaults to none and is
ignored. Note that targeting accelerators is a work in progress and that
the compiler does not yet produce an executable that will run on
accelerators.


--------------------------------------
Caveats for using the acc locale model
--------------------------------------

* The mechanism for targeting accelerator is a work in progress.
  Currently generated code would have to be manually modified to run on
  accelerators. 

