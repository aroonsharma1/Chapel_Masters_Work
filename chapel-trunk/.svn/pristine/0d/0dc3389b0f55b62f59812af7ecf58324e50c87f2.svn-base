Bug: sync int is not allowed as the condition of an 'if' statement

As a result of a group discussion, we concluded that this code
should be allowed. However, the compiler currently reports:

  if-sync-int.chpl:6: error: type 'int(64)' used in if or while condition

To transcribe the discussion... should this code be legal?

An argument for "yes":
  i$ as a rhs is really i$.readFE(), which is an integer. Integers are
  legal in this context (they get coerced to bools inside ifs).

An argument for "no":
  If we take the view that a sync variable is read via an implicit conversion
  from the type sync T to the type T, then...
  i$ coerces to an integer. An integer coerces to a boolean in this context.
  But coercion is not transitive. An integer are not allowed as the condition
  in ifs if it is not coerced to a boolean.

Greg clarifies [as a homage to MTA]:

Yes, I think it should be legal, for the reason described in [the] "Yes:"
alternative.  A variable of type sync T is like a variable of type T in
all ways with respect to its value and how that is converted (implicitly
or explicitly) to other types.  A sync variable also has a full/empty
meta-state which is modified as a side effect of both regular loads and
stores and invocations of the special methods available for sync
variables, but that's orthogonal to its value.

So I think in the example, it's the int value resulting from referencing
the variable that gets coerced to bool.  The sync-ness doesn't matter.
