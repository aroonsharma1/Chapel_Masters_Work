bug: enum dispatch

enumerated types are not dispatching intelligently -- they always
dispatch to the smallest int size available, even if the enum requires
more bits than that to hold all of its values.  This example
demonstrates this, since the enum requires more than 8 bits to store
all of its values, but typically dispatches to 8-bit variants when
given the option.

The .good file shows what I would expect to happen, which is based on
(a) the principle that a specific enum value should dispatch a lot
like an int(64) param does, and (b) that if we have an enum variable,
it needs to dispatch like a variable of at least the maximum size
required would.  I'm not 100% sure I got all the cases, right, but
believe it's more correct than the current compiler is.

