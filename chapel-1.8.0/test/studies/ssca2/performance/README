This test is designed to track the number of communications over time
and make sure that they don't go up unexpectedly.  The challenge is
that the precise number of communications varies based on the
nondeterminism in the algorithm, so a .prediff script is used to keep
things within a 1% tolerance.

When this test fails, if the numbers have gotten worse, it's important
to understand why and try to address that (i.e., treat it as a
regression unless the team buys into the reasons for it getting worse).
If the numbers have gotten better, you can pat yourself on the back
and then update things, which works as follows: 

* take the numbers reported in the .exec.out.tmp that are lower than
  in the .good and replace them to reflect the new numbers. The comm
  counts which are nondeterministic are reported with a tolerance
  range.
  
* the .prediff script tracks the communications that are
  nondeterministic (gets and forks) and keeps them within the
  tolerance range.  For forks, there is a +/-1% tolerance; for gets,
  there is a min value and a 10% tolerance above that min.  Update the
  numbers in the l0..l3 arrays to reflect the changes there.  The
  array entries with 0s in them are expected to be exact.

* re-run to make sure it passes.
