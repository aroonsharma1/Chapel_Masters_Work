." Text automatically generated by txt2man
.TH chpl 1 "17 October 2013" "1.8.0" ""
.SH NAME
\fBchpl \fP- Compiler for the Chapel Programming Language
\fB
.SH SYNOPSIS
.nf
.fam C
\fBchpl\fP [\fB-O\fP] [\fB--no-checks\fP] [\fB--fast\fP]
     [\fB-g\fP] [\fB--savec\fP \fIdirectory\fP]
     [\fB-M\fP \fIdirectory\fP\.\.\.] [\fB--main-module\fP \fImod\fP]
     [\fB-o\fP \fIoutfile\fP] [\fIoptions\fP] source-files\.\.\.

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION

The \fBchpl\fP command invokes the Chapel compiler. \fBchpl\fP converts one or
more Chapel source files into an executable. It does this by
compiling Chapel code to C99 code and then invoking the target
platform's C compiler to create the executable. However, most users
will not need to be aware of the use of C as an intermediate format
during compilation.
.SH SOURCE FILES
Chapel currently recognizes four source file types: .\fBchpl\fP, .c, .h and .o.
.TP
.B
foo.chpl
Chapel sources are compiled by the Chapel compiler into C intermediate code,
which is then passed to the target compiler to be compiled into
object code.
.TP
.B
foo.c
C source files are passed directly to the target C compiler.
.TP
.B
foo.h
C header files are included in the generated C code.
.TP
.B
foo.o
Object files are passed directly to the target linker. 
.SH OPTIONS

\fIModule Processing Options\fP
.TP
.B
--[no-]count-tokens
Prints the total number of static lexical tokens in 
the Chapel code files named on the command line.
.TP
.B
\fB--main-module\fP <module>
For programs that supply multiple possible entry
points (main() functions or module initializers that
can serve as an entry point), this option can be used 
to specify which module should serve as the starting 
point for program execution.
.TP
.B
\fB-M\fP, \fB--module-dir\fP <\fIdirectory\fP>
Add the specified \fIdirectory\fP to the module search 
path. See the description of $CHPL_MODULE_PATH in the 
ENVIRONMENT section of this man page for more details.
.TP
.B
--[no-]print-code-size
Prints out the size of the Chapel code files named
on the command line in great detail: For each code file, 
first the code is echoed back to the screen, prefixing 
each line with the number of lexical tokens it contains, 
or *C* if the line only contains comments, or *B* if the
line is blank. Next, the total number of tokens for the
file is printed. Then the number of lines is 
displayed, broken down into code lines, comment-only 
lines, and blank lines. Then the maximum and average 
number of tokens per line is displayed. Finally, a 
histogram of the number of tokens per line is shown.
After this information is printed for each file, a
grand total of the number of tokens across all the
files is displayed.
.TP
.B
\fB--print-module-files\fP
Prints the Chapel module source files parsed by
the Chapel compiler.
.TP
.B
--[no-]print-search-dirs
Print the module search path used to resolve module 'use'
statements. See the description of $CHPL_MODULE_PATH
in the ENVIRONMENT section of this man page for more 
details.
.PP
\fIParallelism Control Options\fP
.TP
.B
--[no-]local
Compile code for single/[multi-] \fIlocale\fP execution,
changing \fIon blocks\fP to normal blocks, evaluating the
\fIlocale\fP expression for side effects, and optimizing
away all remote references in the code. When $CHPL_COMM
is set to "none", \fB--local\fP is the default; otherwise
\fB--no-local\fP is the default.
.TP
.B
--[no-]serial
Compile code for single/[multi-] threaded execution,
changing forall- and coforall-loops into for loops;
changing begin, cobegin, and atomic blocks into regular
block statements; and removing the serial keyword,
evaluating its expression only for side effects.
When $CHPL_THREADS is set to "none" \fB--serial\fP is the
default; otherwise \fB--no-serial\fP is the default.
.TP
.B
--[no-]serial-forall
Compile forall-loops for single/[multi-] threaded
execution. If set, forall-loops are treated like
for-loops.
.PP
\fIOptimization Control Options\fP
.TP
.B
\fB--baseline\fP
Turns off all optimizations in the Chapel compiler and
generates naive C code with many temporaries.
.TP
.B
\fB--conditional-dynamic-dispatch-limit\fP
When greater than zero, this
limit controls when the compiler will generate
code to handle dynamic dispatch with conditional
statements. If the number of possible method
calls is less than or equal to this limit, a
(possibly nested) conditional statement will be
used for dynamic dispatch instead of the virtual
method table. The default is zero.
.TP
.B
--[no-]copy-propagation
Enable [disable] copy propagation.
.TP
.B
--[no-]dead-code-elimination
Enable [disable] dead code elimination.
.TP
.B
\fB--fast\fP
Turns off all runtime checks using \fB--no-checks\fP, turns
on \fB--no-ieee-float\fP and \fB-O\fP, and enables all compiler
optimizations in the rest of this section.
.TP
.B
--[no-]fast-followers
Enable [disable] the fast follower
optimization in which fast implementations of
followers will be invoked for specific leaders.
.TP
.B
--[no-]ieee-float
Disable [enable] optimizations that may affect IEEE
floating point conformance. The default is \fB--ieee-float\fP,
which ensures IEEE conformance.
.TP
.B
--[no-]loop-invariant-code-motion
Enable [disable] the optimization that
moves loop invariant code from loop runs into the loop's
"pre-header." By default invariant code is moved. This is
currently a rather conservative pass in the sense that 
it may not identify all code that is truly invariant.
.TP
.B
--[no-]inline
Enable [disable] function inlining.
.TP
.B
--[no-]inline-iterators
Enable [disable] iterator inlining. When
possible, the compiler optimizes the invocation of an
iterator in a loop header by inlining the
iterator's definition around the loop body.
.TP
.B
--[no-]live-analysis
Enable [disable] live variable analysis, which is
currently only used to optimize iterators that are
not inlined.
.TP
.B
--[no-]optimize-loop-iterators
Enable [disable] optimizations to
aggressively optimize iterators that are defined in terms
of a single loop. By default this is enabled.
.TP
.B
--[no-]optimize-on-clauses
Enable [disable] optimization of on
clauses in which qualifying on
statements may be optimized in the
runtime if supported by the $CHPL_COMM
layer.
.TP
.B
\fB--optimize-on-clause-limit\fP
Limit on the function call depth to allow
for on clause optimization. The default value is 20.
.TP
.B
--[no-]privatization
Enable [disable] privatization of distributed arrays
and domains if the distribution supports it.
.TP
.B
--[no-]remove-copy-calls
Enable [disable] removal of copy calls
(including calls to what amounts to a copy
constructor for records) that ensure Chapel
semantics but which can often be optimized away.
.TP
.B
--[no-]remote-value-forwarding
Enable [disable] remote value
forwarding of read-only values to remote threads
if reading them early does not violate program
semantics.
.TP
.B
--[no-]scalar-replacement
Enable [disable] scalar replacement of records
and classes for some compiler-generated data structures
that support language features such as tuples and
iterators.
.TP
.B
\fB--scalar-replace-limit\fP
Limit on the size of tuples being replaced during
scalar replacement. The default value is 8.
.TP
.B
--[no-]tuple-copy-opt
Enable [disable] the tuple copy optimization
in which whole tuple copies of homogenous
tuples are replaced with explicit assignment
of each tuple component.
.TP
.B
\fB--tuple-copy-limit\fP
Limit on the size of tuples considered for the
tuple copy optimization. The default value is 8.
.PP
\fIRun-time Semantic Check Options\fP
.TP
.B
\fB--no-checks\fP
Turns off many run-time checks, equivalent to:
\fB--no-bounds-checks\fP \fB--no-nil-checks\fP \fB--no-local-checks\fP
Currently, it is typically necessary to use this flag
(or \fB--fast\fP) in order to have any hope of achieving
performance competitive with hand-coded C or Fortran.
.TP
.B
--[no-]bounds-checks
Enable [disable] run-time bounds checking,
e.g. during slicing and array indexing.
.TP
.B
--[no-]local-checks
Enable [disable] run-time checking of the locality of
references within local blocks.
.TP
.B
--[no-]nil-checks
Enable [disable] run-time checking for accessing nil
object references.
.PP
\fIC Code Generation Options\fP
.TP
.B
--[no-]codegen
Enable [disable] generating C code and the binary
executable. Disabling code generation is useful to reduce
compilation time, for example, when only Chapel compiler
warnings/errors are of interest.
.TP
.B
--[no-]cpp-lines
Causes the compiler to emit cpp #line directives
into the generated code in order to help map generated
C code back to the Chapel source code that it implements.
The [no-] version of this flag turns this feature off.
.TP
.B
\fB--max-c-ident-len\fP
Limits the length of identifiers in the generated code,
except when set to 0. The default is 0, except when
$CHPL_TARGET_COMPILER indicates a PGI compiler (pgi or
cray-prgenv-pgi), in which case the default is 1020.
.TP
.B
\fB--savec\fP <dir>
Saves the compiler-generated C code in the specified 
\fIdirectory\fP, creating the \fIdirectory\fP if it does not already
exist. This option may overwrite existing files in the
\fIdirectory\fP.
.PP
\fIC Code Compilation Options\fP
.TP
.B
\fB--ccflags\fP <flags>
Add the specified flags to the C compiler command line
when compiling the generated code.
.TP
.B
\fB-g\fP, --[no-]debug
Causes the generated C code to be compiled with debugging
turned on. If you are trying to debug a Chapel program,
this flag is virtually essential along with the \fB--savec\fP
flag. This flag also turns on the \fB--cpp-lines\fP option
unless compiling as a developer (for example, via \fB--devel\fP).
.TP
.B
\fB--dynamic\fP
Use dynamic linking when generating the final binary.  If 
neither \fB--dynamic\fP or \fB--static\fP are specified, use the
backend compiler's default.
.TP
.B
\fB-I\fP, \fB--hdr-search-path\fP <dir>
Add dir to the back-end C compiler's search 
path for header files.
.TP
.B
\fB--ldflags\fP <flags>
Add the specified flags to the C compiler link line
when linking the generated code.
.TP
.B
\fB-l\fP, \fB--lib-linkage\fP <library>
Specify a C library to link in on the C 
compiler command line.
.TP
.B
\fB-L\fP, \fB--lib-search-path\fP <dir>
Specify a C library search path on the C
compiler command line.
.TP
.B
\fB--make\fP <make utility>
Specify the gmake-compatible utility that should be 
used when compiling the generated code.
.TP
.B
\fB-O\fP, --[no-]optimize
Causes the generated C code to be compiled with
[without] optimizations turned on. The specific set of
flags used by this option is platform-dependent; use the
\fB--print-commands\fP option to view the C compiler command
used. If you would like additional flags to be used with
the C compiler command, use the \fB--ccflags\fP option.
.TP
.B
\fB-o\fP, \fB--output\fP <filename>
Specify the name of the compiler-generated
executable (defaults to a.out if unspecified).
.TP
.B
\fB--static\fP
Use static linking when generating the final binary.  If 
neither \fB--static\fP or \fB--dynamic\fP are specified, use the
backend compiler's default.
.PP
\fILLVM Code Generation Options\fP
.TP
.B
--[no-]llvm
Use LLVM as the code generation target rather than C. See
$CHPL_HOME/doc/technotes/README.llvm for details.
.TP
.B
--[no-]llvm-wide-opt
Enable [disable] LLVM wide pointer communication 
optimizations.
This option requires \fB--llvm\fP and packed wide pointers.
Packed wide pointers are enabled by setting
CHPL_WIDE_POINTERS = node16. You must also supply \fB--fast\fP
to enable wide pointer optimizations. This flag allows
existing LLVM optimizations to work with wide pointers -
for example, they might be able to hoist a 'get' out of a
loop. See $CHPL_HOME/doc/technotes/README.llvm for details.
.PP
\fIDocumentation Options\fP
.TP
.B
--[no-]docs
Create [Don't create] documents based on comments
preceding symbol declarations. See
$CHPL_HOME/doc/technotes/README.chpldoc for more
information.
.TP
.B
--[no-]docs-alphabetical
[Don't] Alphabetize the documentation within
each lexical scope rather than using the declaration
order within the code.
.TP
.B
\fB--docs-comment-style\fP <string>
Specify the opening comment character
sequence used to distinguish a documentation comment
from a normal one (defaults to '/*' if unspecified).
.TP
.B
\fB--docs-dir\fP <dirname>
Specify the \fIdirectory\fP name into which documentation
should be saved (defaults to 'docs' if unspecified).
.TP
.B
\fB--docs-text-only\fP
Specify that documents should use a text output file
format rather than HTML.
.PP
\fICompilation Trace Options\fP
.TP
.B
--[no-]print-commands
Prints the system commands that the compiler 
executes in order to compile the Chapel program.
.TP
.B
--[no-]print-passes
Prints the compiler passes during compilation and the
amount of wall clock time required for the pass.
.PP
\fIMiscellaneous Options\fP
.TP
.B
--[no-]devel
Puts the compiler into [out of] developer mode, which
takes off some of the safety belts, changes default
behaviors, and exposes additional undocumented
command-line \fIoptions\fP. Use at your own risk and direct any
questions to the Chapel team.
.TP
.B
\fB--explain-call\fP <call>[:<module>][:<line>]
Helps explain the function
resolution process for the named function by printing 
out the visible and candidate functions. Specifying 
a module name and/or line number can focus the
explanation to those calls within a specific module
or at a particular line number.
.TP
.B
\fB--explain-instantiation\fP <function|type>[:<module>][:<line>]
Lists
all of the instantiations of a function or type.
The location of one of possibly many points of
instantiation is shown. Specifying a module name
and/or line number can focus the explanation to
those calls within a specific module or at a
particular line number.
.TP
.B
\fB--instantiate-max\fP <max>
In order to avoid infinite loops when
instantiating generic functions, the compiler
limits the number of times a single function
can be instantiated. This flag raises that
maximum in the event that a legal instantiation
is being pruned too aggressively.
.TP
.B
--[no-]print-callstack-on-error
Accompany certain error and warning
messages with the Chapel call stack that the compiler
was working on when it reached the error or warning
location. This is useful when the underlying cause
of the issue is in one of the callers.
.TP
.B
\fB-s\fP, \fB--set\fP <config param>[=<value>]
Overrides the default value of
a configuration parameter in the code. For
boolean configuration variables, the value can
be omitted, causing the default value to be toggled.
.TP
.B
--[no-]warn-const-loops
Enable [disable] warnings for 'while' loops
whose condition is a 'const' variable, because such
.RS
.TP
.B
a loop condition is likely unintended.
'While' loops
with 'param' conditions do not trigger this warning.
.RE
.TP
.B
--[no-]warn-special
Enable [disable] all special compiler warnings
issued due to syntax and other language
changes. Currently, these include
--[no-]warn-domain-literal and
--[no-]warn-tuple-iteration.
.TP
.B
--[no-]warn-domain-literal
Enable [disable] compiler warnings
regarding the potential use of the old-style
domain literal syntax (e.g. [1..2, 3..4]). All
array literals with range elements will result in
warnings.
.TP
.B
--[no-]warn-tuple-iteration
Enable [disable] compiler warnings
regarding the potential use of old-style
zippering syntax. All uses of tuple iteration
will produce warnings.
.TP
.B
\fB--no-warnings\fP
Turns off compiler warnings.
.PP
\fICompiler Information Options\fP
.TP
.B
\fB--copyright\fP
Print the compiler's copyright information.
.TP
.B
\fB-h\fP, \fB--help\fP
Print a list of the command line \fIoptions\fP, indicating
the arguments that they expect and a brief summary of their 
purpose.
.TP
.B
\fB--help-env\fP
Print the command line option help message, listing
the environment variable equivalent for each flag (see
ENVIRONMENT VARIABLES FOR OPTIONS) and its current value.
.TP
.B
\fB--help-settings\fP
Print the command line option help message, listing
the current setting of each option as specified by
environment variables and other flags on the command line.
.TP
.B
\fB--license\fP
Print the compiler's license information.
.TP
.B
\fB--version\fP
Print the version number of the compiler.
.SH ENVIRONMENT VARIABLES FOR OPTIONS

Most compiler command-line \fIoptions\fP have an environment variable that can
be used to specify a default value. Use the \fB--help-env\fP option to list the 
environment variable equivalent for each option. Command-line \fIoptions\fP 
will always override environment variable settings in the event of a 
conflict.
.PP
If the environment variable equivalent is set to empty, it is considered
unset. This does not apply to \fIoptions\fP expecting a string or a path.
.PP
For \fIoptions\fP that can be used with or without the leading \fB--no\fP (they are
shown with "[no-]" in the help text), the environment variable equivalent,
when set to a non-empty string, has the following effect. When the first
character of the string is one of:
.PP
.nf
.fam C
    Y y T t 1 - same as passing the option without --no,

    N n F f 0 - same as passing the option with --no,

    anything else - generates an error.

.fam T
.fi
For the other \fIoptions\fP that enable, disable or toggle some feature, any
non-empty value of the environment variable equivalent has the same effect
as passing that option once.
.RE
.PP

.SH ENVIRONMENT

See $CHPL_HOME/doc/README.chplenv for detailed information about 
general environment variable settings, legal values, and default
settings. Run $CHPL_HOME/util/printchplenv to view your current
settings (as explicitly set and inferred). Some of the most
commonly-used environment variables are summarized here.
.TP
.B
CHPL_HOME
Specifies the location of the Chapel installation \fIdirectory\fP.
.TP
.B
CHPL_HOST_PLATFORM
Specifies the platform on which the Chapel compiler is
running (defaults to our best guess).
.TP
.B
CHPL_TARGET_PLATFORM
Specifies the platform on which the target executable
is to be run for the purposes of cross-compiling
(defaults to $CHPL_HOST_PLATFORM).
.TP
.B
CHPL_HOST_COMPILER
Specifies the compiler suite that should be used
to build the Chapel compiler (defaults to a best
guess based on $CHPL_HOST_PLATFORM).
.TP
.B
CHPL_TARGET_COMPILER
Specifies the compiler suite that should be used
to build the generated C code for a Chapel program
and the Chapel runtime (defaults to a best guess 
based on $CHPL_HOST_PLATFORM, $CHPL_TARGET_PLATFORM,
and $CHPL_HOST_COMPILER).
.TP
.B
CHPL_LOCALE_MODEL
Specifies the \fIlocale\fP model to use for describing
your \fIlocale\fP architecture (defaults to 'flat')
.TP
.B
CHPL_COMM
Specifies the communication layer to use for
inter-\fIlocale\fP data transfers (defaults to 'none').
.TP
.B
CHPL_TASKS
Specifies the tasking layer to use for implementing
tasks (defaults to a best guess based on
$CHPL_TARGET_PLATFORM).
.TP
.B
CHPL_THREADS
Specifies the threading layer to used by the tasking
layer to implement \fBthreads\fP(defaults to a best
guess based on $CHPL_TASKS).
.TP
.B
CHPL_LAUNCHER
Specifies the launcher, if any, used to start job
execution (defaults to a best guess based on
$CHPL_COMM and $CHPL_TARGET_PLATFORM).
.TP
.B
CHPL_TIMERS
Specifies a timer implementation to be used by
the Time module (defaults to 'generic').
.TP
.B
CHPL_MEM
Specifies the memory allocator used for dynamic memory
management (defaults to a best guess based on $CHPL_COMM).
.TP
.B
CHPL_MAKE
Specifies the GNU compatible make utility
(defaults to a best guess based on
$CHPL_HOST_PLATFORM).
.TP
.B
CHPL_ATOMICS
Specifies the implementation to use for Chapel's atomic
variables (defaults to a best guess based on $CHPL_TARGET_COMPILER, $CHPL_TARGET_PLATFORM, and $CHPL_COMM).
.TP
.B
CHPL_GMP
Specifies the GMP library implementation to be
used by the GMP module (defaults to a best guess
based on $CHPL_TARGET_PLATFORM and whether
you've built the included GMP library in the
third-party \fIdirectory\fP).
.TP
.B
CHPL_REGEXP
Specifies the regular expression library to use
(defaults to 'none' or 're2' if you've installed
the re2 package in the third-party \fIdirectory\fP).
.TP
.B
CHPL_WIDE_POINTERS
Specifies the wide porter format format
(defaults to 'struct').
.TP
.B
CHPL_LLVM
When set to 'llvm', use the LLVM/Clang back-end
(defaults to 'none').
.TP
.B
CHPL_AUX_FILESYS
Specify runtime support for additional file
systems (defaults to 'none').
.TP
.B
CHPL_DEVELOPER
When set, build and compile in developer mode,
which generates line numbers in internal module
code and throws extra warning flags when
compiling the generated C code.
.TP
.B
CHPL_MODULE_PATH
Specifies a list of colon-separated directories to be 
added to the module search path. The module search path
is used to satisfy module 'use' statements. In the current
implementation, the compiler tries to locate unresolved
modules by searching for a filename whose name matches
that of the module. For example, if the user program
contains 'use foo' and the .\fBchpl\fP files listed by the
programmer on the compiler's command line do not define
a module named 'foo', the compiler will search for files 
named 'foo.chpl' in the module search path.
.RS
.PP
The complete path that will be searched can be displayed
using the \fB--print-search-dirs\fP flag and is composed of
(1) the directories containing the .\fBchpl\fP files that were
specified on the compiler command-line (in left-to-right 
order), (2) all directories specified by \fB-M\fP flags (in 
left-to-right order), (3) all directories specified by the
$CHPL_MODULE_PATH environment variable, (4) the
compiler's standard module search path. 
.RE
.RE
.PP

.SH BUGS
See $CHPL_HOME/STATUS for a list of known bugs and $CHPL_HOME/doc/README.bugs
for instructions on reporting bugs.
.SH SEE ALSO
$CHPL_HOME/README for more information on how to get started with Chapel.
.SH AUTHORS
See $CHPL_HOME/CONTRIBUTORS for a list of contributors to Chapel.
.SH COPYRIGHT
Copyright (c) 2004-2013 Cray Inc. (See $CHPL_HOME/LICENSE for more details.)
