bug: Iterator class memory is leaked when inlining is disabled/disrupted.

Code generation of iterators (loops) is incorrect, because the code to release
resources is emitted ahead of the break label.  If the "goto breakLabel"
statement is reached, then that memory will be leaked.

The correct solution to this problem is to encode the loop with one segment to
represent the loop body an another to represent actions that are taken after the
loop is exited, thus:

<loop_stmt> = <init_block><body><cleanup_block>

This could be emitted as

{
  <init_block>
}
while (1)
{
  if (<exit_condition>)
    goto _breakLabel;
  <loop_body>
}
_breakLabel:
{
  <cleanup_block>
}
