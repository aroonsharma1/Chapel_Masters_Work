===============
chpldoc feature
===============

The term 'chpldoc' refers to a prototypical capability for generating
HTML- or text-based documentation for Chapel code from comments
embedded within the code, similar in spirit to Javadoc or Pydoc.  As
of the 1.6 release of Chapel, 'chpldoc' documentation can either be
created via compiler flags or a standalone 'chpldoc' symbolic link
that is put into $CHPL_HOME/bin/$CHPL_HOST_PLATFORM at build-time.


Prerequisites
-------------

Creating HTML-based documentation with chpldoc (which is the default)
requires the installation of helper Python packages Creoleparser and
Genshi.  We were not able to bundle these packages with the Chapel
sources in time for this release, but for convenience have set up
Makefiles to help install them within a third-party directory
($CHPL_HOME/third-party/creoleparser/) via the 'easy_install' tool.
To use these Makefiles for the installation, use:

  [g]make -C $CHPL_HOME/third-party creoleparser

You can also install these packages yourself (or user pre-installed
versions), as long as they are within your system or personal Python
path, or $CHPL_HOME/third-party/creoleparser/install.

For more information on Creoleparser or Genshi, please refer to the
creoleparser entry in $CHPL_HOME/third-party/README


Generating docs
---------------

To create chpldoc documentation, you can either add the '--doc' flag
to your normal Chapel compiler line or use the standalone 'chpldoc'
utility.  The primary difference between the two approaches is that
the former will compile the Chapel program as usual while the latter
will exit after creating the documentation.

By default, documentation created by chpldoc will end up in a
subdirectory of the current working directory named 'docs/'.  You can
specify a different directory name using the --docs-dir option.

Any Chapel source files specified with a relative or absolute path
will be saved in a directory named relative to the docs directory,
which can sometimes be confusing.  We intend to address this in future
versions of chpldocs.  For now, for best/simplest results, running
chpldoc on a single file local to the directory in question will
tend to yield the best results.

By default, docs will be created in HTML format.  If text-only docs
are preferred, use the --docs-text-only flag.

As a sample, there is a primer on the chpldoc capability in
$CHPL_HOME/examples/primers/ that can be turned into documentation
using:

	cd $CHPL_HOME/examples/primers
	chpl --docs chpldoc.chpl
OR:
	chpldoc chpldoc.chpl

After running either of these commands, the output documentation will
be located in:

   	$CHPL_HOME/examples/primers/docs/chpldoc.html


Documenting Chapel code
-----------------------

To document Chapel code, place a multi-line comment just prior to the
definition of the symbol --- module, class, function, method,
variable, etc. --- that you wish to comment.  By default, all
multi-line comments are considered potential documentation.  If you
would like to restrict documentation to multi-line comments starting
only with a special character sequence (say, '/***') use the
--docs-comment-style flag to indicate the desired prefix (e.g.,
--docs-comment-style=\/\*\*\*).  Setting a comment style in this way
also establishes that the closing comment style should have the same
number of characters (though they can be different ones).  This may
change in future versions.

By default, documentation elements will be emitted in code order.  If
the --docs-alphabetical flag is used, they will be sorted into
alphabetical order within each lexical scope.

Documentation text within comments can use the Creole Wiki markup
notation to request specific formatting choices within the generated
HTML.  For example **this text would appear bold** when rendered
within the generated HTML.  For more information on Creole, see

       http://www.wikicreole.org


Creole Markup Quick Reference
-----------------------------

Here is a quick reference (developed from similar resources at
http://creoleparser.googlecode.com and http://wikicreole.org):

  //italics//          : italic text
  **bold**             : bold text

  * Bullet list
  * Second item        : a bulleted list and sub-list
  ** Sub item

  # Numbered list
  # Second item        : a numbered list and sub-list
  ## Sub item

  [[wiki page]]        : hyperlink named 'wiki page' to anchor with same name
  [[wiki page|here]]   : hyperlink named 'here' to anchor named 'wiki page'
  [[URL|link name]]    : link named 'link name' to URL

  == Large heading
  === Medium heading   : different text heading sizes
  ==== Small heading

  No
  linebreaks           : by default, linebreaks are ignored (treated as spaces)
  here!                  

  Blank line
                       : blank lines will insert an empty line/paragraph break
  in here!

  Forced\\linebreak    : forces a line break at the specified point

  Horizontal line:     : creates a horizontal line
  ----

  {{Image.jpg|title}}  : insert an image with title/alt-text 'title'

  |=|=table|=header|  
  |a|table|row|        : creates a table where the first row is a header
  |b|table|row|

  {{{//ignore markups//}}} : ignores markupts/treats test as pre-formatted
  ~**escape markups    : tilde (~) causes the next markup symbol to be ignored


Future Directions
-----------------

Here are some directions we intend to take this feature in future
versions.  If there are other features you'd like to request, please
let us know.

* improve visual separation between distinct language components

* make generated files relocatable (i.e., don't embed absolute paths)

* add ability to create anchors within a document

* add support for file-level comments for implicit/file-oriented modules

* add mode in which symbols are not emitted if they have no documentation

* improve placement of documentation files for .chpl files specified
  with absolute or relative paths

* reconsider what closing comment forms are accepted for the
  --docs-comment-style flag

* add visibility control (public/private) to Chapel and have chapeldoc
  only represent public elements by default

* consider adding the ability to embed unit tests within documentation

* document existing Chapel libraries
