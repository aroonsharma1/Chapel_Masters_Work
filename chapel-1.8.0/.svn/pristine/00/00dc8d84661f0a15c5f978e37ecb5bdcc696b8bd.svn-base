semantic: param coercions of non-default int params

Chapel has traditionally said that only default-sized int param values
will be considered as coercing down to smaller int arguments for which
their value fits.  This future files away a semantic question that
came up for me in implementing small-int-idxType ranges and domains
(and for David in reviewing the patch): Is there a deep reason that we
only support such coercions on default-sized ints?  Couldn't we do the
same for smaller-sized ints as well?  This test shows that the call to
foo() that passes in a param int(64) works because the value (1) fits
into an int(16).  Yet the one that passes in a param int(32) doesn't
work.  Couldn't it be made to work under the same rationale?

IIRC, we took this behavior from C#.  It's worth investigating whether
there was rationale there that's worth using to justify this decision,
or whether Chapel's use of params is different enough that we
could/should be different in this respect as well.

If there was compelling reason to chase after this, I think I could do
so fairly easily with the recent changes I've been making to
functionResolution.cpp, but for now I'm filing it away for a rainy
day as it seems largely academic to me today.

