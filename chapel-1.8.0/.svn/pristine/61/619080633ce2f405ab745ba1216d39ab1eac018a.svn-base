\documentclass[10pt]{article}

\usepackage{fullpage}
\usepackage{times}
\usepackage{listings}
\input{chapel_listing}

\pagestyle{empty}

\begin{document}
\lstset{language=chapel}

\section*{Bounded Buffer Exercise}

\section{Single Consumer}
Using boundedBuffer.chpl as a starting point, fill in the methods
\begin{chapel}
BoundedBuffer.add(i: eltType)
BoundedBuffer.remove(): eltType
BoundedBuffer.these()
\end{chapel}
The \chpl{add} method should place its argument into the buffer. If the
buffer is already full, \chpl{add} should block until a space is available.

The \chpl{remove} method should remove an item from the buffer and return it.
If the buffer is empty, it should block until an element gets added.

The \chpl{these} iterator should iterate to yield all elements in the
buffer until the sentinel is encountered. 

To change the problem size, set the configuration variable on the
command line as follows:
\begin{quote}
\begin{footnotesize}
\begin{verbatim}
> a.out --problemSize=30
\end{verbatim}
\end{footnotesize}
\end{quote}

\section{Adding Pipeline Steps}
Now add a function called \chpl{middleStep} that takes an integer argument and
consumes the values produced by \chpl{producer}, passes them through
\chpl{createNextValue} to get values to put into a bounded buffer
for \chpl{consumer}.

Can you pass produced values from the producer through multiple
\chpl{middleStep} functions before getting to \chpl{consumer}?

Hint: Change the variable \chpl{buffer} into an array of buffers, and call
the \chpl{middleStep} function in a \chpl{coforall} loop inside of the
\chpl{cobegin} in main.

\begin{chapel}
coforall i in 1..nMiddleSteps do
  middleStep(i);
\end{chapel}

\section{Multiple Consumers}
Try adding another \chpl{coforall} loop in the \chpl{cobegin} that calls
\chpl{consumer}.

\begin{chapel}
coforall i in 1..nConsumers do
  consumer(i);
\end{chapel}

Can multiple \chpl{consumer} functions consume values from the same
bounded buffer?

\end{document}
