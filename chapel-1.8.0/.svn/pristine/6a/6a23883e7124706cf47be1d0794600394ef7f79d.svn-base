\documentclass[10pt]{article}

\usepackage{fullpage}
\usepackage{times}
\usepackage{listings}
\input{chapel_listing}

\pagestyle{empty}

\begin{document}
\lstset{language=chapel}

\section*{Histogram Exercise}

\section{Serial Histogram}
Using histogram.chpl as a starting point, fill in the function
\begin{chapel}
computeHistogram(X: [] real, Y: [] int)
\end{chapel}
This function takes two arguments.  \chpl{X} is an array of random
numbers defined over \chpl{1..numNumbers}.  \chpl{Y} is an empty array
that should contain the histogram data.  It is defined over
\chpl{1..numBuckets}.

The output should look something like:
\begin{quote}
\begin{footnotesize}
\begin{verbatim}
> a.out
Running Histogram Example
 Number of Random Numbers =        8
 Number of Buckets        =       10

Random Numbers

0.585924 0.59617 0.491852 0.788843 0.354106 0.031778 0.469706 0.4702

Histogram computed in 1e-06 seconds

     X     
     XX    
 X  XXX X  
+----------+
 Raw Data
  0.00 - 0.10: 1
  0.10 - 0.20: 0
  0.20 - 0.30: 0
  0.30 - 0.40: 1
  0.40 - 0.50: 3
  0.50 - 0.60: 2
  0.60 - 0.70: 0
  0.70 - 0.80: 1
  0.80 - 0.90: 0
  0.90 - 1.00: 0
\end{verbatim}
\end{footnotesize}
\end{quote}

To change the problem size, set the configuration variable on the
command line as follows:
\begin{quote}
\begin{footnotesize}
\begin{verbatim}
> a.out --numNumbers=1000
\end{verbatim}
\end{footnotesize}
\end{quote}
You can also change the number of buckets via \chpl{numBuckets} and
you can avoid printing the random numbers by setting
\chpl{printRandomNumbers} to \chpl{false}.  Try the following run:
\begin{quote}
\begin{footnotesize}
\begin{verbatim}
> a.out --printRandomNumbers=false --numNumbers=1000000
\end{verbatim}
\end{footnotesize}
\end{quote}

\section{Parallel Histogram}
Now add another configuration constant with the line
\begin{chapel}
config const numThreads: int = 4;
\end{chapel}
Then use \chpl{numThreads} in a function that computes the histogram
with that many threads.  Hint: use a \chpl{coforall} statement to
create the tasks and a sync variable to ensure that the code is
race-free.

Does your parallel code run faster than your serial code?  What about
at larger problem sizes?

\section{Normal Histogram}
Now add another array of random numbers and compute the histogram of
the element-wise averages.  You can store the averages in the first
array for simplicity.

\end{document}
