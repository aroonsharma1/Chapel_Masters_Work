#LyX 1.6.0 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Estimating Ï€ Using a Monte Carlo Method
\end_layout

\begin_layout Standard
In this exercise, you will become familiar with Chapel's basic syntax, including
 some of the parallel tasking features, while estimating the value of 
\begin_inset Formula $\pi$
\end_inset

 using a Monte Carlo method.
\end_layout

\begin_layout Enumerate
As with any Monte Carlo method, you will need a pseudorandom number generator.
 A simple one, taken from 
\begin_inset CommandInset citation
LatexCommand cite
key "63042"

\end_inset

, is a multiplicative linear congruential generator defined by the following
 formula:
\begin_inset Formula \begin{equation}
x_{n+1}=ax_{n}\mathrm{mod}m,\label{eq:MLCG}\end{equation}

\end_inset

where the multiplier 
\begin_inset Formula $a=16807$
\end_inset

 and the modulus 
\begin_inset Formula $m=2^{31}-1=2147483647$
\end_inset

.
 To get started with this exercise, you will implement this random number
 generator as a function that takes an argument (corresponding to 
\begin_inset Formula $x_{n}$
\end_inset

 in the formula above) and use it to compute and return the next random
 number in the sequence.
 (If you are terrified of starting with a blank screen, you can use RandomNumber
0.chpl in the solutions to the exercises as a starting point.) Be careful
 with how you do the multiplication: the product 
\begin_inset Formula $ax_{n}$
\end_inset

 can be as large as 
\begin_inset Formula $16807\times2147483646\thickapprox1.03\times2^{45}$
\end_inset

.
\end_layout

\begin_layout Enumerate
To test your random number generator, you can write a main program that
 invokes your random number generator 10000 times, with 1 as the argument
 when you invoke it the very first time.
 Have your program write out the last return value; if it writes out 1043618065,
 you have implemented your random number generator correctly.
\end_layout

\begin_layout Enumerate
You can use your random number generator to simulate throwing darts at random
 at a unit circle.
 Each dart will fall somewhere on a 
\begin_inset Formula $1\times1$
\end_inset

 grid.
 Therefore, you will need to modify your random number generator to generate
 real numbers between 0 and 1 inclusive.
 One way to do this would be to create another function that takes no arguments,
 calls the one you just wrote, subtracts 1 from the return value (so the
 value is now in the range of 0 and 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
2147483645 inclusive), and then divides that by 2147483645 (using floating-point
 arithmetic).
 Your new function can pass in a global variable to the one you wrote before.
\end_layout

\begin_layout Enumerate
Since you follow good software engineering practices, you will want to encapsula
te your code in a module.
 First, replace your random number generator's argument (often referred
 to as the seed) with a (global) config var that is initialized to 1.
 This will have the advantage of allowing the initial value to be specified
 on the command line when you run your program by using the 
\begin_inset Quotes eld
\end_inset

--<
\emph on
config-var-name
\emph default
>=<
\emph on
value
\emph default
>
\begin_inset Quotes erd
\end_inset

 flag (without the double quotes), where 
\emph on
config-var-name
\emph default
 is the name of your config var, and 
\emph on
value
\emph default
 is the initial value you want to use (instead of 1).
 Next, to make things more convenient later on, put your main program's
 code into a function that does not take any arguments.
 Create a separate source file that uses the module you just wrote and invokes
 what used to be the main program and is now a function.
 You will need to use the 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $\mathtt{--main-module}$
\end_inset

 <
\emph on
module-name
\emph default
>
\begin_inset Quotes erd
\end_inset

 flag when you compile your source files together to specify which module
 contains the main program.
 (Unless you specify otherwise in your source code, the name of a module
 is taken from its file name.)
\end_layout

\begin_layout Enumerate
In order to determine if a particular simulated dart hit inside the unit
 circle, you can generate a random point 
\begin_inset Formula $(x,y)$
\end_inset

 in a 
\begin_inset Formula $1\times1$
\end_inset

 grid, and then calculate its distance from the origin using the formula
 
\begin_inset Formula $d=\sqrt{x^{2}+y^{2}}$
\end_inset

.
 If this distance 
\begin_inset Formula $d\leq1$
\end_inset

, then the dart fell inside the unit circle.
 You can then calculate the proportion of how many simulated darts fell
 inside the unit circle as compared to the total number of simulated darts.
 This proportion corresponds to the area within a 
\begin_inset Formula $1\times1$
\end_inset

 grid that is within the unit circle.
 Now, the area of a unit circle is given by the formula 
\begin_inset Formula $A=\pi r^{2}$
\end_inset

, where 
\begin_inset Formula $r$
\end_inset

 is the radius of the circle.
 Since in this case, the radius 
\begin_inset Formula $r=1$
\end_inset

, the area is simply 
\begin_inset Formula $\pi$
\end_inset

.
 However, a 
\begin_inset Formula $1\times1$
\end_inset

 grid covers only one of four quadrants in which the unit circle lies, so
 the proportion of simulated darts that fall inside the unit circle within
 this grid will have to be multiplied by 4.
 I.e.,
\begin_inset Formula \[
\pi\thickapprox4\times\frac{D_{\textrm{in}}}{D_{\textrm{total}}},\]

\end_inset

where 
\begin_inset Formula $D_{\textrm{in}}$
\end_inset

 is the number of simulated darts that fall inside the unit circle within
 a 
\begin_inset Formula $1\times1$
\end_inset

 grid, and 
\begin_inset Formula $D_{\textrm{total}}$
\end_inset

 is the total number of simulated darts thrown.
\end_layout

\begin_deeper
\begin_layout Standard
In the separate source file you created above, write a program that generates
 a random point (by invoking your random number generator twice), and determines
 if it is inside the unit circle.
 Now, put a loop around this, and keep a count of the total number of points
 generated, as well as how many of those points fell inside the unit circle.
 Then, print out the proportion of these counts multiplied by 4.
 Run your program several times, each time with a different number of generated
 points.
 (You may find it convenient to use a config const to control the number
 of generated points from the command line you use to run your program.)
 The accuracy of your estimate of 
\begin_inset Formula $\pi$
\end_inset

 should improve as you increase the number of simulated darts.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\emph on
Optional
\emph default
: Use the reduce operator with a square-bracketed forall expression as its
 operand to count how many points are inside the unit circle.
 Note that you can use a boolean expression as part of the forall expression;
 the value of a boolean expression is 1 if it evaluates to true, and 0 otherwise.
\end_layout

\end_deeper
\begin_layout Enumerate
It would be great to improve the performance of your program by parallelizing
 it.
 One way to do that would be to break up the counting of the points among
 several tasks by using the coforall statement.
 This will require a thread-safe random number generator.
 You can test if your random number generator is thread safe by replacing
 the for statement in what used to be the main program of your random number
 generator module with a coforall statement.
 (Ignore the warning message about running out of threads to run your program.)
 Since the computation for each iteration is so short, it is unlikely you
 will run into any race conditions.
 However, if you use a standard module called Time, and insert 
\begin_inset Formula $\mathtt{sleep(1);}$
\end_inset

 in the function that computes the next random number to delay its computation
 by about a second, you will be much more likely to run into a race condition,
 and the output of your program will very likely be different.
\end_layout

\begin_layout Enumerate
In order to make your random number generator thread safe, you can use a
 sync variable so that only one iteration of the coforall statement can
 read and then modify the global variable your random number generator uses:
 once a sync variable is read, no task (including the one that just read
 it) can read it again until it has been written to.
 Now that your random number generator is thread safe, replace the for statement
 in your program to estimate 
\begin_inset Formula $\pi$
\end_inset

 with a coforall statement.
 You may need to use a sync variable to ensure you get an accurate count!
\end_layout

\begin_layout Enumerate
Unfortunately, this is not a very satisfactory way to parallelize this program
 because the random number generator serializes execution.
 There are several ways around this.
 One way is to have each iteration use a different random number generator
 to create several points.
 For the purposes of this exercise, you can create a new random number generator
 by using different values for the multiplier 
\begin_inset Formula $a$
\end_inset

 in equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:MLCG"

\end_inset

 above, such as 397204094 or 950706376.
 (See 
\begin_inset CommandInset citation
LatexCommand cite
key "272709"

\end_inset

.) For each iteration, the count of points that lie inside the unit circle
 can be accumulated in a separate variable, and these counts can be added
 together at the end.
\end_layout

\begin_layout Enumerate
As an exercise for the reader, you can distribute the computation to multiple
 locales, and have each locale execute one iteration of the coforall statement.
 In order to avoid having each locale access global arrays or variables,
 which would reside in locale 0, you can encapsulate all the data that a
 locale will need into a class, and then have each locale instantiate that
 class.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
